=Доска объявлений

==Предисловие

Данное задание направлено в первую очередь на обучение, а не проверку знаний.

Настоятельно рекомендуется вести разработку в Unix-like системах. В качестве 

редактора кода рекомендуется использовать текстовый редактор Sublime Text 3.

Обязательно к прочтению: http://guides.rubyonrails.org/. Это основной источник 

информации о том, как все работает. Документацию очень удобно смотреть на http://

apidock.com/.

Код приложения нужно хостить в вашем репозитории на гитхабе. Для начала работы 

с гитом, можно пройти мини-курс на https://try.github.io. Обязательно задеплоить проект 

на любом вашем сервере или на хероку (https://www.heroku.com/). Обязательно настроить 

систему непрерывной интеграции Travis (https://travis-ci.org/) для выполнения тестов после 

каждого пуша в репозиторий.

Задание

Сервис представляет собой доску объявлений. Пользователи могут создавать 

объявления, отправлять их на модерацию. Админы могут просматривать пользователей 

и объявления, ожидающие модерации. Админ может подтвердить публикацию или 

отклонить с каким-нибудь комментарием. Лог действий с объявлением сохраняется. На 

главной странице выводятся все опубликованные объявления и их можно фильтровать и 

сортировать.

Основные сущности:

● Пользователь

● Объявление

● Категория объявлений

Объявления

Объявление имеет название, описание, несколько изображений, цену.

Объявление может находиться только в одной из категорий.

Объявление может быть одного из пяти типов: “продажа”, “покупка”, “обмен”, “услуга”, 

“аренда”.

Объявление может находиться в одном из состояний: “новое”, “ожидает публикации”, 

“отклонено”, “опубликовано”, “архив”.

Каждые 10 минут все объявления, которые находятся в стататусе “опубликовано” 

больше 1 дня должны переводиться из статуса “опубликовано” в статус “архив”.

Все действия (кто, когда, из какого в какой статус перевел, комментарий, если есть) с 

объявлениями должны сохранятся.

==Гости

Гости имеют доступ к главной странице, не могут создавать объявления.

==Пользователи

Пользователь может зарегистрироваться на сайте.

Пользователь может войти на сайт с помощью аккаунта в популярной соц. сети 

(twitter, vk, facebook, google+).

Пользователь может создавать объявления. Сразу после создания, объявление 

имеет статус “новое”.

У пользователя есть личный кабинет в котором он может видеть свои объявление и 

их статусы.

При редактировании объявления оно автоматически переходит в статус “новое”.

Пользователь может перевести объявление из статусов “новое” и “архив” в статус 

“ожидает публикации”, а также из любого статуса в статус “архив”.

Администратор

Администратор может создавать и редактировать категории объявлений.

Администратор может просматривать список все пользователей и их объявление в 

статусе “ожидает публикации”, “отклонено”, “опубликовано”.

У администратора есть панель управления, в которой отображаются все объявления 

от пользователей в статусе “ожидает публикации”.

==Администратор может переводить пользовательские объявления из статуса “ожидает 

публикации” в статус “опубликовано” или “отклонено”.

При отклонении объявления администратором, он должен указать комментарий, 

который будет виден в логе действий объявления.

==Главная страница

Главная страница представляет собой список объявлений от разных пользователей в 

статусе “опубликовано”.

Объявления можно отсортировать по дате публикации и по цене.

Объявления можно отфильтровать по категории и по статусу одновременно или по 

отдельности.

Должна быть возможность поиска по содержанию объявления.

Дополнительные условия

При создании приложения необходимо использовать самую последнюю версию руби 

и самую последнюю версию рельсов.

В стиле кода нужно придерживаться правил, описанных в https://github.com/bbatsov/

ruby-style-guide и https://github.com/bbatsov/rails-style-guide.

Обязательно написать интеграционные тесты на основной функционал (создание, 

редактирование объявок, смена статусов, фильтрация, сортировка). Очень желательно 

писать юнит тесты на разрабатываемые методы моделей и контроллеров.

Можно использовать любые гемы, которые будут полезными.

Обязательно использовать следующие гемы:

1. devise для регистрации и аутентификации пользователей.

2. cancancan или pundit для авторизации пользователей.

3. whenever для задач по расписанию.

4. state_machine для реализации логики смены статусов объявления.

5. ransack для сортировок и фильтрации объявлений.

6. kaminari или will_paginate для пагинации.

7. simple_form для построения форм.

8. slim для шаблонов.

9. rspec и capybara для тестов.

Для верстки можно использовать Twitter Bootstrap (http://getbootstrap.com/) или Zurb 

Foundation (http://foundation.zurb.com/).